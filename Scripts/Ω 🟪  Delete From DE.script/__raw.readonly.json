{
  "ssjsActivityId": "0d20ebbe-508c-41af-8132-1e39f063b2d5",
  "name": "Delete From DE",
  "key": "17eaad8b-47f2-47fd-81e1-28c87429f427",
  "description": "",
  "script": "<script runat=\"server\">\n\nPlatform.Load(\"Core\", \"1.1.5\");\nvar api = new Script.Util.WSProxy();\n\nvar sourceDENameWithRowToDelete = 'apagar_1'; \nvar tagetDENameToDeleteRows = 'Tb_Base_Prospect_OTC291_Filtrada_Algar';\nvar logDEName = 'resultados delete_2';\nvar logDECK = retrieveDECustomerKeyFromName(api, logDEName)\n\nvar depara = [\n  {\n    source: 'cpf',\n    destiny: 'CPF'\n  }\n];\n\ntry{\n\nvar deSourceToExclude = DataExtensionRecordsOperator({api: api, dataExtensionName: sourceDENameWithRowToDelete});\n\nfunction myDeleteFunction(records){\n  // Write('records' + '\\n');\n  // Write(Stringify(records) + '\\n\\n');\n\n  // Write('depara' + '\\n');\n  // Write(Stringify(depara) + '\\n\\n');\n  var formatedField = matchFields(records, depara);\n  \n  var deleteBatch = convertArrayOfObjectsToDeleteBatch(formatedField, retrieveDECustomerKeyFromName(api, tagetDENameToDeleteRows), [ depara[0].destiny ]);\n  \n  var resultDeleteBatch = api.deleteBatch(\"DataExtensionObject\", deleteBatch);\n  \n  insertRecordInDE(api, {RESULTADO: 'Apagados: ' + resultDeleteBatch.Results.length}, logDECK);\n\n  Write('\\nresultDeleteBatch\\n');\n  Write(Stringify(resultDeleteBatch.Results.length) + '\\n');\n\n}\nvar sourceDataToExclude = deSourceToExclude.pipeExecuteInAllRecords(null, myDeleteFunction, 2000);\n\nWrite('concluido' + '\\n');\n\n}catch(e){\n  Write('Error');\n  Write(Stringify(e));\n}\n\nfunction DataExtensionRecordsOperator(configuration){\n  var api;\n  var customerKey;\n  \n  if(!configuration) Platform.Function.RaiseError('An configuration Object is required');\n  if(!configuration.api) Platform.Function.RaiseError('Api attribute is required');\n  if(!configuration.dataExtensionCustomerKey && !configuration.dataExtensionName) Platform.Function.RaiseError('dataExtensionCustomerKey or dataExtensionName attribute is required');\n  if(configuration.dataExtensionCustomerKey && typeof configuration.dataExtensionCustomerKey != 'string') Platform.Function.RaiseError('dataExtensionCustomerKey must be a String');\n  api = configuration.api;\n  \n  if(configuration.dataExtensionCustomerKey == null || configuration.dataExtensionCustomerKey == ''){\n    var simpleFilter = {\n      Property: 'Name',\n      SimpleOperator: 'equals',\n      Value: configuration.dataExtensionName\n    }\n    customerKey = api.retrieve(\"DataExtension\", [\"CustomerKey\"], simpleFilter).Results[0].CustomerKey;\n  }else{\n    customerKey = configuration.dataExtensionCustomerKey;\n  }\n\n  function getRecords(options){\n    // options Object can have filter or headers\n    if(!!options && typeof options != 'object') Platform.Function.RaiseError('Options must be an object or omitted');\n        \n    var headers;\n    var filter;\n\n    if(!!options && options.headers){\n      headers = options.headers;\n    }else{\n      headers = retrieveFieldNames(customerKey, api);\n    }\n\n    if(!!options && options.filter) filter = options.filter;\n\n    var config = {\n      customerKey: customerKey,\n      cols: headers\n    }\n  \n    var records = [],\n    moreData = true,\n    reqID = data = null;\n\n    while (moreData) {\n      moreData = false;\n      if (reqID == null) {\n        if(filter == undefined || filter == null){\n          data = api.retrieve(\"DataExtensionObject[\" + config.customerKey + \"]\", config.cols);\n        }else{\n          data = api.retrieve(\"DataExtensionObject[\" + config.customerKey + \"]\", config.cols, filter);\n        }\n        if(data.Status.substring(0, 5) == 'Error'){\n          Platform.Function.RaiseError('Something went wrong: ' + data.Status);\n        }\n      } else {\n        data = api.getNextBatch(\"DataExtensionObject[\" + config.customerKey + \"]\", reqID);\n      }\n\n      if (data != null) {\n        moreData = data.HasMoreRows;\n        reqID = data.RequestID;\n        for (var i = 0; i < data.Results.length; i++) {\n          var result_list = data.Results[i].Properties;\n          var obj = {};\n          for (k in result_list) {\n            var key = result_list[k].Name;\n            var val = result_list[k].Value\n            if (key.indexOf(\"_\") != 0) obj[key] = val;\n          }\n        records.push(obj);\n        }\n      }\n    }\n    return records;\n    \n  }\n\n  function pipeExecuteInAllRecords(options, cb, batchSize){\n    // options Object can have filter or headers\n    if(!!options && typeof options != 'object') Platform.Function.RaiseError('Options must be an object or omitted');\n    var batchSizeActual = batchSize == null || batchSize == undefined ? 2500 : batchSize;\n    batchSizeActual = batchSizeActual > 2500 ? 2500 : batchSizeActual;\n    if(batchSizeActual == 0) Platform.Function.RaiseError('batchSize cannot be 0');\n        \n    var filter;\n    headers = retrieveFieldNames(customerKey, api);\n\n    if(!!options && options.filter) filter = options.filter;\n\n    var config = {\n      customerKey: customerKey,\n      cols: headers\n    }\n  \n    var records = [],\n    moreData = true,\n    reqID = data = null;\n\n    while (moreData) {\n      moreData = false;\n      if (reqID == null) {\n        if(filter == undefined || filter == null){\n          data = api.retrieve(\"DataExtensionObject[\" + config.customerKey + \"]\", config.cols);\n        }else{\n          data = api.retrieve(\"DataExtensionObject[\" + config.customerKey + \"]\", config.cols, filter);\n        }\n        if(data.Status.substring(0, 5) == 'Error'){\n          Platform.Function.RaiseError('Something went wrong: ' + data.Status);\n        }\n      } else {\n        data = api.getNextBatch(\"DataExtensionObject[\" + config.customerKey + \"]\", reqID);\n      }\n\n      if (data != null) {\n        moreData = data.HasMoreRows;\n        reqID = data.RequestID;\n        var retrievedData = data.Results;\n        while ( retrievedData.length != 0 ) {\n          var currentData = retrievedData.splice(0, batchSizeActual);\n          for (var i = 0; i < currentData.length; i++) {\n            var result_list = currentData[i].Properties;\n            var obj = {};\n            for (k in result_list) {\n              var key = result_list[k].Name;\n              var val = result_list[k].Value\n              if (key.indexOf(\"_\") != 0) obj[key] = val;\n            }\n            records.push(obj);\n          }\n          cb(records); // operate over the first Chunck\n          records = []; // clear records, free up memory\n        }\n      }\n    }\n  }\n\n  function retrieveFieldNames(customerKey, api) {\n    var filter = {\n      Property: \"DataExtension.CustomerKey\",\n      SimpleOperator: \"equals\",\n      Value: customerKey\n    };\n\n    var req = api.retrieve(\"DataExtensionField\", [\"Name\"], filter);\n    var fields = req.Results;\n    var out = [];\n    for (k in fields) {\n      out = out.concat(fields[k].Name);\n    }\n    return out;\n  }\n\n  return {\n    getRecords: getRecords,\n    pipeExecuteInAllRecords: pipeExecuteInAllRecords\n  }\n}\n\nfunction insertRecordInDE(api, record, customerKey){\n  if(!api) Platform.Function.RaiseError('Api param is required');\n  var props = [];\n  for(prop in record){\n    props.push( {Name: prop, Value: record[prop] } );\n  }\n  var data = {\n    CustomerKey: customerKey,\n    Properties: props\n  }\n  return api.createItem('DataExtensionObject', data);\n}\n\nfunction retrieveDECustomerKeyFromName(api, dataExtensionName){\n  var simpleFilter = {\n    Property: 'Name',\n    SimpleOperator: 'equals',\n    Value: dataExtensionName\n  }\n  var result = api.retrieve('DataExtension', ['CustomerKey'], simpleFilter);\n  if(result.Status != 'OK' || result.Results.length < 1){\n    return null\n  }else{\n    return result.Results[0].CustomerKey;\n  }\n}\n\nfunction convertArrayOfObjectsToDeleteBatch(ArrayOfRecordsObjects, DECustomerKey, keyFields){\n  // convert [{ 'key1': 'value1', 'key2': 'value2'}, { 'key3': 'value3', 'key4': 'value4'}] \n  // into [ {CustomerKey: DECustomerKey, Properties: [{ 'Name': 'key1', 'Value': 'value1'}, { 'Name': 'key2', 'Value': 'value2'}] } }, \n  //  {CustomerKey: DECustomerKey, Properties: [{ 'Name': 'key3', 'Value': 'value3'}, { 'Name': 'key4', 'Value': 'value4'}] } } ]\n\n  var itemsToBatch = [];\n  var recordToBatch = [];\n\n  for(var i = 0; i < ArrayOfRecordsObjects.length; i++){\n    recordToBatch = mapObjectRecordToArrayKeys(ArrayOfRecordsObjects[i], keyFields);\n\n    itemsToBatch.push({\n      CustomerKey: DECustomerKey,\n      Keys: recordToBatch\n    });\n  }\n  return itemsToBatch;\n}\n\nfunction mapObjectRecordToArrayKeys(objRecord, keyFields){\n  // convert { 'key': 'value'} into [{'Name': 'key', 'Value': 'value'}]\n  var arrayRecord = [];\n  var auxProp = {};\n  var keyField = '';\n\n  for(var i = 0; i < keyFields.length; i++){\n    keyField = keyFields[i];\n    auxProp.Name = keyField;\n    auxProp.Value = objRecord[keyField];\n    \n    arrayRecord.push(auxProp);\n    auxProp = {};\n  }\n\n  return arrayRecord;\n}\n\nfunction matchFields(arrayOfRecords, fieldsToMatch){\n  // fieldsToMatch must be an array of objects like:\n  /*\n  [\n    {\n      source: 'de',\n      destiny: 'para'\n    },\n    {\n      source: 'de',\n      destiny: 'para'\n    }\n  ] \n  */\n\n  // Match fields from Base Qualificacao to Qualificacao - Cadastro Positivo\n  var arrayOfRecordsResult = [];\n  var auxRecord = {};\n  var auxCurrentRecord = {}\n  for(var i = 0; i < arrayOfRecords.length; i++){\n    auxCurrentRecord = arrayOfRecords[i];\n\n    for(var key in auxCurrentRecord){\n      var found = false;\n      if(fieldsToMatch && fieldsToMatch.length > 0){\n        for(var j = 0; !found && j < fieldsToMatch.length; j++){\n          if(key === fieldsToMatch[j].source){\n            auxRecord[ fieldsToMatch[j].destiny ] = auxCurrentRecord[fieldsToMatch[j].source];\n            found = true;\n          }\n        }\n      }\n      \n      if(!found){\n        auxRecord[key] = auxCurrentRecord[key];\n      }\n    }\n    \n    arrayOfRecordsResult.push(auxRecord);\n    auxRecord = {};\n    auxCurrentRecord = {};\n  }\n\n  return arrayOfRecordsResult;\n}\n</script>",
  "categoryId": 1937,
  "createdDate": "2022-03-25T15:19:53.21",
  "modifiedDate": "2022-05-27T06:31:00.02"
}
{
  "id": 35857,
  "customerKey": "9548a054-7c69-49e8-a8b4-2a3a711e3d77",
  "objectID": "f85e67de-7010-4fe9-befd-2fbbea25ced6",
  "assetType": {
    "id": 220,
    "name": "codesnippetblock",
    "displayName": "Code Snippet Block"
  },
  "fileProperties": {
    "fileName": "TEST"
  },
  "name": "Data Extension Finder",
  "owner": {
    "id": 713538740,
    "email": "matheus.leto@harpiacloud.com.br",
    "name": "Matheus Leto",
    "userId": "713538740"
  },
  "createdDate": "2021-08-27T15:44:29.87-06:00",
  "createdBy": {
    "id": 713538740,
    "email": "matheus.leto@harpiacloud.com.br",
    "name": "Matheus Leto",
    "userId": "713538740"
  },
  "modifiedDate": "2021-08-30T09:23:00.707-06:00",
  "modifiedBy": {
    "id": 713538740,
    "email": "matheus.leto@harpiacloud.com.br",
    "name": "Matheus Leto",
    "userId": "713538740"
  },
  "enterpriseId": 514002572,
  "memberId": 514002572,
  "status": {
    "id": 1,
    "name": "Draft"
  },
  "thumbnail": {
    "thumbnailUrl": "/v1/assets/35857/thumbnail"
  },
  "category": {
    "id": 17416,
    "name": "Testes",
    "parentId": 1942
  },
  "content": "\nPlatform(\"Core\", \"2.0\");\nvar api = new Script.Util.WSProxy();\n\ntry {\n  var folderManipulator = DataExtensionFolders({api: api});\n  var allFolders = reduceFolders(folderManipulator.getAllFolders());\n  var dataExtensionCollection = DataExtensionCollection({api: api});\n  var allDEs = reduceDEs(dataExtensionCollection.getAllDEs());\n\n  Write(Stringify({folders: allFolders, des: allDEs}));\n  \n} catch (error) {\n  Write('error\\n');\n  Write(Stringify(error.message));\n}\n\n// --------------- MAIN -------------------\nfunction retrieveDEByNameLike(api){\n  var postedData = getPostData();\n  var DENameToLookLike = postedData.name;\n  \n  if( DENameToLookLike == null || DENameToLookLike == undefined || DENameToLookLike.length < 4 ){\n    Platform.Function.RaiseError('INVALID_SEARCH_NAME');\n  }\n\n  var DEsFound = DataExtensionCollection({api:api}).getDEWithNameLike(DENameToLookLike);\n  return DEsFound;\n}\n\nfunction retrieveDEInsideFolder(api) {\n  var postedData = getPostData();\n  var folderIDToLookUp = postedData.folderID;\n  \n  if( folderIDToLookUp == null || folderIDToLookUp == undefined){\n    Platform.Function.RaiseError('INVALID_ID');\n  }\n\n  var DEsFound = DataExtensionCollection({api:api}).getDEsInisdeFolder(folderIDToLookUp);\n  return DEsFound;\n}\n\nfunction retrieveFolderByID(api){\n  var postedData = getPostData();\n  var folderIdToLookUp = postedData.id;\n  \n  if( folderIdToLookUp == null || folderIdToLookUp == undefined ){\n    Platform.Function.RaiseError('INVALID_ID');\n  }\n\n  var foldersFound = DataExtensionFolders({api: api}).getFolderByID(folderIdToLookUp);\n  return foldersFound;\n}\n\nfunction retrieveChildrenFolderByID(api){\n  var postedData = getPostData();\n  var folderIdToLookUp = postedData.id;\n  \n  if( folderIdToLookUp == null || folderIdToLookUp == undefined ){\n    Platform.Function.RaiseError('INVALID_ID');\n  }\n\n  var foldersFound = DataExtensionFolders({api: api}).getInsideFolders(folderIdToLookUp);\n  return foldersFound;\n}\n\nfunction retrieveFolderByNameLike(api){\n  var postedData = getPostData();\n  var folderNameToLookLike = postedData.name;\n  \n  if( folderNameToLookLike == null || folderNameToLookLike == undefined || folderNameToLookLike.length < 4 ){\n    Platform.Function.RaiseError('INVALID_SEARCH_NAME');\n  }\n\n  var foldersFound = DataExtensionFolders({api: api}).getFoldersByNameLike(folderNameToLookLike);\n  return foldersFound;\n}\n\n// ---------------- AUX FUNCTIONS ----------------\n\n// Get data in post\nfunction getPostData(){\n  var postData = Platform.Request.GetPostData(0);\n  var parsedData = Platform.Function.ParseJSON( postData );\n  return parsedData;\n}\n\nfunction reduceFolders(folders){\n  return mapArray(folders, function(folder) {\n    return {\n      Name: folder.Name,\n      ID: folder.ID,\n      ParentFolder: { ID: folder.ParentFolder.ID },\n      CreatedDate: folder.CreatedDate\n    };\n  });\n}\n\nfunction reduceDEs(DEs){\n  return mapArray(DEs, function(de) {\n    return {\n      Name: de.Name,\n      CustomerKey: de.CustomerKey,\n      CategoryID: de.CategoryID,\n      CreatedDate: de.CreatedDate,\n      ObjectID: de.ObjectID\n    };\n  });\n}\n\n// ---------------- Library ----------------\n\n// Data Extension Folder Library\nfunction DataExtensionFolders(configuration){\n  if(!configuration) Platform.Function.RaiseError('An configuration Object is required');\n  if(!configuration.api) Platform.Function.RaiseError('Api attribute is required');\n  \n  var api = configuration.api;\n  var headers = GlobalObject({api: api}).getAllRetrievableFields('DataFolder');\n\n  function retrieveFoldersByName(name){\n    // Filter to get the parent folder\n    var folderFitler = {\n      LeftOperand: {\n        Property: \"Name\",\n        SimpleOperator: 'equals',\n        Value: name\n      },\n      LogicalOperator: \"AND\",\n      RightOperand: {\n        Property: \"ContentType\",\n        SimpleOperator: 'equals',\n        Value: 'dataextension'\n      }\n    };\n\n    // Retrieve the parent folder\n    var folderRetreiveResult = api.retrieve('DataFolder', headers,  folderFitler );\n\n    return mapArray(folderRetreiveResult.Results, \n      function(val){ return generateFolderObject(val) });\n  }\n\n  function getFoldersByNameLike(name){\n    // Filter to get the parent folder\n    var folderFitler = {\n      LeftOperand: {\n        Property: \"Name\",\n        SimpleOperator: 'like',\n        Value: name\n      },\n      LogicalOperator: \"AND\",\n      RightOperand: {\n        Property: \"ContentType\",\n        SimpleOperator: 'equals',\n        Value: 'dataextension'\n      }\n    };\n\n    // Retrieve the parent folder\n    var folderRetreiveResult = api.retrieve('DataFolder', headers,  folderFitler );\n\n    return mapArray(folderRetreiveResult.Results, \n      function(val){ return generateFolderObject(val) });\n  }\n\n  function getFolderByID(id){\n    var folderFitler = {\n      LeftOperand: {\n        Property: \"ID\",\n        SimpleOperator: 'equals',\n        Value: id\n      },\n      LogicalOperator: \"AND\",\n      RightOperand: {\n        Property: \"ContentType\",\n        SimpleOperator: 'equals',\n        Value: 'dataextension'\n      }\n    };\n\n    var folderRetreiveResult = api.retrieve('DataFolder', headers,  folderFitler);\n    return mapArray(folderRetreiveResult.Results, function(val){ return generateFolderObject(val) });\n    \n  }\n\n  function getInsideFolders(id){\n    var folderFitler = {\n      LeftOperand: {\n        Property: \"ParentFolder.ID\",\n        SimpleOperator: 'equals',\n        Value: id\n      },\n      LogicalOperator: \"AND\",\n      RightOperand: {\n        Property: \"ContentType\",\n        SimpleOperator: 'equals',\n        Value: 'dataextension'\n      }\n    };\n\n    var folderRetreiveResult = api.retrieve('DataFolder', headers,  folderFitler );\n    return mapArray(folderRetreiveResult.Results, function(val){ generateFolderObject(val) });\n  }\n\n  function getDeepInsideFolders(id){\n    var allFolders = [];\n    var searchFolders = [id];\n    var folderFitler = {\n      LeftOperand: {\n        Property: \"ParentFolder.ID\",\n        SimpleOperator: 'equals',\n        Value: folderParentID\n      },\n      LogicalOperator: \"AND\",\n      RightOperand: {\n        Property: \"ContentType\",\n        SimpleOperator: 'equals',\n        Value: 'dataextension'\n      }\n    }\n\n    do{\n      if(searchFolders.length < 2){\n        folderFitler.LeftOperand.SimpleOperator = 'equals';\n        folderFitler.LeftOperand.Value = searchFolders[0];\n      }else{\n        folderFitler.LeftOperand.SimpleOperator = 'IN';\n        folderFitler.LeftOperand.Value = searchFolders;\n      }\n\n      var folderRetreiveResult = api.retrieve('DataFolder', headers,  folderFitler);\n      \n      mapArray(folderRetreiveResult.Results, function(val){ allFolders.push(generateFolderObject(val)); return null; });\n      searchFolders = mapArray(folderRetreiveResult.Results, function(val){ return val.ID });\n  \n    }while(searchFolders.length > 0);\n\n    return allFolders;\n  }\n\n  function mapArray(array, callback, thisArg) {\n    var T, A, k;var O = array;var len = O.length;if (typeof callback !== 'function') {throw new TypeError(callback + ' is not a function');}if (arguments.length > 2) {T = thisArg;}A = [];k = 0;while (k < len) {var kValue, mappedValue;kValue = O[k];mappedValue = callback.call(T, O[k], k, O);A.push(mappedValue);k++;}return A;\n  }\n\n  function getAllFolders(){\n    var DEfolderFitler = {\n      Property: \"ContentType\",\n      SimpleOperator: 'equals',\n      Value: 'dataextension'\n    };\n\n    var folderRetreiveResult = api.retrieve('DataFolder', headers, DEfolderFitler);\n    return mapArray(folderRetreiveResult.Results, function(val){ generateFolderObject(val) });\n  }\n\n  function generateFolderObject(obj){\n    return{\n      ID: obj.ID,\n      Name: obj.Name,\n      Description: obj.Description,\n      ContentType: obj.ContentType,\n      IsActive: obj.IsActive,\n      IsEditable: obj.IsEditable,\n      AllowChildren: obj.AllowChildren,\n      CreatedDate: obj.CreatedDate,\n      ModifiedDate: obj.ModifiedDate,\n      ObjectID: obj.ObjectID,\n      CustomerKey: obj.CustomerKey,\n      ParentFolder: {\n        ID: obj.ParentFolder.ID,\n        CustomerKey: obj.ParentFolder.CustomerKey,\n        ObjectID: obj.ParentFolder.ObjectID,\n        Name: obj.ParentFolder.Name,\n        Description: obj.ParentFolder.Description,\n        ContentType: obj.ParentFolder.ContentType,\n        IsActive: obj.ParentFolder.IsActive,\n        IsEditable: obj.ParentFolder.IsEditable,\n        AllowChildren: obj.ParentFolder.AllowChildren\n      },\n      Client: {\n        ID: obj.Client.ID,\n        ModifiedBy: obj.Client.ModifiedBy,\n        EnterpriseID: obj.Client.EnterpriseID,\n        CreatedBy: obj.Client.CreatedBy\n      }\n    }\n  }\n\n  function GlobalObject(configuration){\n    if(!configuration) Platform.Function.RaiseError('An configuration Object is required');\n    if(!configuration.api) Platform.Function.RaiseError('Api attribute is required');\n  \n    function getAllRetrievableFields(objectType){\n      if(objectType == null || objectType == '') Platform.Function.RaiseError('objectType is required');\n      var lookedResponse = 'Error: The Request Property(s) ';\n  \n      var result = api.describe('DataFolder');\n      var propertiesName = mapArray(result.Results[0].Properties, function(val){ return val.Name });\n      \n      var simpleFilterName = {\n        Property: propertiesName[0],\n        SimpleOperator: 'equals',\n        Value: 'some_value'\n      }\n  \n      var fieldsCheck = api.retrieve(objectType, propertiesName, simpleFilterName);\n      \n      if(!fieldsCheck.Status || fieldsCheck.Status.substring( 0, lookedResponse.length) != lookedResponse){\n        // Platform.Function.RaiseError('Not Expected response when trying to get the headers.\\n' + fieldsCheck);\n        return [\"ID\"];\n      }\n      \n      var treatedResponse = fieldsCheck.Status.replace(lookedResponse, '');\n      var regex = /(\\S+)/ig; // the first index will have the invalid fields\n      var notValidFields = (treatedResponse.match(regex)[0]).split(',');\n  \n      return filterArray(propertiesName, function(val){ return indexOf(notValidFields, val) == -1 });\n    }\n  \n    function mapArray(array, callback, thisArg) {\n      var T, A, k;var O = array;var len = O.length;if (typeof callback !== 'function') {throw new TypeError(callback + ' is not a function');}if (arguments.length > 2) {T = thisArg;}A = [];k = 0;while (k < len) {var kValue, mappedValue;kValue = O[k];mappedValue = callback.call(T, O[k], k, O);A.push(mappedValue);k++;}return A;\n    }\n  \n    function indexOf(arr, searchElement, fromIndex) {\n      var k;var o = arr;var len = o.length;if (len == 0) {return -1;}var n = fromIndex || 0;if (n >= len) {return -1;}if(n >= 0){k = n;}else{k = Math.max(len - Math.abs(n), 0);}for (; k < len; k++) {if (k in o && o[k] == searchElement)return k;}return -1;\n    }\n  \n    function filterArray(arr, callback) {\n      if (!(!!arr && Object.prototype.toString.call(arr) == '[object Array]')) {throw new TypeError();}var t = arr;var len = t.length;if (typeof callback != 'function') {throw new TypeError();}var res = [];if (arguments.length >= 3) {var thisArg = arguments[2];}for (var i = 0; i < len; i++) {var val = t[i];if (callback.call(thisArg, val, i, t)) {res.push(val);}}return res;\n    }\n  \n    return {\n      getAllRetrievableFields: getAllRetrievableFields\n    }\n  }\n\n  return {\n    retrieveFoldersByName: retrieveFoldersByName,\n    getFolderByID: getFolderByID,\n    getInsideFolders: getInsideFolders,\n    getDeepInsideFolders: getDeepInsideFolders,\n    getFoldersByNameLike: getFoldersByNameLike,\n    getAllFolders: getAllFolders\n  }\n}\n\n// Aux to use Array.map\nfunction mapArray(array, callback, thisArg) {\n  var T, A, k;var O = array;var len = O.length;if (typeof callback !== 'function') {throw new TypeError(callback + ' is not a function');}if (arguments.length > 2) {T = thisArg;}A = [];k = 0;while (k < len) {var kValue, mappedValue;kValue = O[k];mappedValue = callback.call(T, O[k], k, O);A.push(mappedValue);k++;}return A;\n}\n\n// Data Extension Finder\nfunction DataExtensionCollection(configuration) {\n  if(!configuration) Platform.Function.RaiseError('An configuration Object is required');\n  if(!configuration.api) Platform.Function.RaiseError('Api attribute is required');\n  var api = configuration.api;\n\n  // if(!customerKey && !name) Platform.Function.RaiseError('Either \\\"customerKey\\\" or \\\"name\\\" is required');\n\n  function generateDataExtensionObject(obj){\n    if(!obj) return;\n    var formatedObject = {\n      ObjectID: obj.ObjectID,\n      PartnerKey: obj.PartnerKey,\n      CustomerKey: obj.CustomerKey,\n      Name: obj.Name,\n      CreatedDate: obj.CreatedDate,\n      ModifiedDate: obj.ModifiedDate,\n      Description: obj.Description,\n      IsSendable: obj.IsSendable,\n      IsTestable: obj.IsTestable,\n      CategoryID: obj.CategoryID,\n      Status: obj.Status,\n      IsPlatformObject: obj.IsPlatformObject,\n      DataRetentionPeriodLength: obj.DataRetentionPeriodLength,\n      DataRetentionPeriodUnitOfMeasure: obj.DataRetentionPeriodUnitOfMeasure,\n      RowBasedRetention: obj.RowBasedRetention,\n      ResetRetentionPeriodOnImport: obj.ResetRetentionPeriodOnImport,\n      DeleteAtEndOfRetentionPeriod: obj.DeleteAtEndOfRetentionPeriod,\n      RetainUntil: obj.RetainUntil,\n      DataRetentionPeriod: obj.DataRetentionPeriod\n    }\n    if(obj.Template && obj.Template.CustomerKey){\n      formatedObject.Template = {CustomerKey: obj.Template.CustomerKey};\n    }else{\n      formatedObject.Template = {CustomerKey: null};\n    }\n    if(obj.SendableSubscriberField && obj.SendableSubscriberField.Name){\n      formatedObject.SendableSubscriberField = {Name: obj.SendableSubscriberField.Name};\n    }else{\n      formatedObject.SendableSubscriberField = {Name: null};\n    }\n    if(obj.SendableDataExtensionField && obj.SendableDataExtensionField.Name){\n      formatedObject.SendableDataExtensionField = {Name: obj.SendableDataExtensionField.Name};\n    }else{\n      formatedObject.SendableDataExtensionField = {Name: null};\n    }\n    if(obj.Client && obj.Client.ID){\n      formatedObject.Client = {ID: obj.Client.ID};\n    }else{\n      formatedObject.Client = {ID: null};\n    }\n\n    return formatedObject;\n  }\n\n  function retriveDEs(prop, operator, value){\n    var retrieveFilter = {\n      Property: prop,\n      SimpleOperator: operator,\n      Value: value\n    };\n\n    var retrievedDE = api.retrieve('DataExtension', [\n      'ObjectID',\n      'PartnerKey',\n      'CustomerKey',\n      'Name',\n      'CreatedDate',\n      'ModifiedDate',\n      'Description',\n      'IsSendable',\n      'IsTestable',\n      'CategoryID',\n      'Status',\n      'IsPlatformObject',\n      'DataRetentionPeriodLength',\n      'DataRetentionPeriodUnitOfMeasure',\n      'RowBasedRetention',\n      'ResetRetentionPeriodOnImport',\n      'DeleteAtEndOfRetentionPeriod',\n      'RetainUntil',\n      'DataRetentionPeriod',\n      'Template.CustomerKey',\n      'SendableSubscriberField.Name',\n      'SendableDataExtensionField.Name',\n      'Client.ID'\n      ], retrieveFilter\n    );\n    return retrievedDE.Results;\n  }\n\n  function getDEsInisdeFolder(folderID){\n    var des = retriveDEs('CategoryID', 'equals', folderID);\n\n    return mapArray(des, function(de){\n      return generateDataExtensionObject(de);\n    });\n  }\n\n  function getDEWithNameLike(name){\n    var des = retriveDEs('Name', 'like', name);\n    \n    return mapArray(des, function(de){\n      return generateDataExtensionObject(de);\n    });\n  }\n\n  function getAllDEs(){\n    var des = api.retrieve('DataExtension', [\n      'ObjectID',\n      'PartnerKey',\n      'CustomerKey',\n      'Name',\n      'CreatedDate',\n      'ModifiedDate',\n      'Description',\n      'IsSendable',\n      'IsTestable',\n      'CategoryID',\n      'Status',\n      'IsPlatformObject',\n      'DataRetentionPeriodLength',\n      'DataRetentionPeriodUnitOfMeasure',\n      'RowBasedRetention',\n      'ResetRetentionPeriodOnImport',\n      'DeleteAtEndOfRetentionPeriod',\n      'RetainUntil',\n      'DataRetentionPeriod',\n      'Template.CustomerKey',\n      'SendableSubscriberField.Name',\n      'SendableDataExtensionField.Name',\n      'Client.ID'\n      ]\n    ).Results;\n    \n    return mapArray(des, function(de){\n      return generateDataExtensionObject(de);\n    });\n  }\n\n  function mapArray(array, callback, thisArg) {\n    var T, A, k;var O = array;var len = O.length;if (typeof callback !== 'function') {throw new TypeError(callback + ' is not a function');}if (arguments.length > 2) {T = thisArg;}A = [];k = 0;while (k < len) {var kValue, mappedValue;kValue = O[k];mappedValue = callback.call(T, O[k], k, O);A.push(mappedValue);k++;}return A;\n  }\n  \n  return {\n    getDEWithNameLike: getDEWithNameLike,\n    getDEsInisdeFolder: getDEsInisdeFolder,\n    getAllDEs: getAllDEs\n  }\n}",
  "availableViews": [],
  "modelVersion": 2
}
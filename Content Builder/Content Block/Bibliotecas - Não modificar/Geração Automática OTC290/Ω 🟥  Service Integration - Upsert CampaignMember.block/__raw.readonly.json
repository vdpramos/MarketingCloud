{
  "id": 60141,
  "customerKey": "c579a2d6-45f1-4cc3-8a4a-b32191de195e",
  "objectID": "804affd1-56ec-40d8-bc87-f39c990749eb",
  "assetType": {
    "id": 220,
    "name": "codesnippetblock",
    "displayName": "Code Snippet Block"
  },
  "fileProperties": {
    "fileName": "Service Integration - Upsert CampaignMember"
  },
  "name": "Service Integration - Upsert CampaignMember",
  "owner": {
    "id": 713538740,
    "email": "matheus.leto@harpiacloud.com.br",
    "name": "Matheus Leto",
    "userId": "713538740"
  },
  "createdDate": "2022-04-16T07:17:14.167-06:00",
  "createdBy": {
    "id": 713538740,
    "email": "matheus.leto@harpiacloud.com.br",
    "name": "Matheus Leto",
    "userId": "713538740"
  },
  "modifiedDate": "2022-05-03T20:37:29.277-06:00",
  "modifiedBy": {
    "id": 713538740,
    "email": "matheus.leto@harpiacloud.com.br",
    "name": "Matheus Leto",
    "userId": "713538740"
  },
  "enterpriseId": 514002572,
  "memberId": 514002572,
  "status": {
    "id": 1,
    "name": "Draft"
  },
  "thumbnail": {
    "thumbnailUrl": "/v1/assets/60141/thumbnail"
  },
  "category": {
    "id": 45099,
    "name": "Geração Automática OTC290",
    "parentId": 45122
  },
  "content": "\n// Configs\nvar SOBJECTTYPE = 'CampaignMember';\nvar otc291_DE_Customerkey = retrieveDECustomerKeyFromName(api, nameDE);\nvar urlToUpsert = 'https://brasilcap.my.salesforce.com/services/data/v54.0/composite/';\nvar BATCH_SIZE = 1000;\nvar MAX_COMPOSITE_SUBREQUEST_SIZE = 200;\nvar logDEName = 'Log Salesforce Integration';\nvar logDECustomerKey = retrieveDECustomerKeyFromName(api, logDEName);\nvar START_TIME = new Date().getTime();\nvar MAX_EXECUTION_TIME_MILISECONDS = 60 * 28.5 * 1000;\n\ntry {\nvar otc291_DE_Customerkey = retrieveDECustomerKeyFromName(api, nameDE);\nvar requestAccessTokenFunction = eval(Platform.Function.TreatAsContent( Platform.Function.ContentBlockByID('56359') ));\nvar access_token = requestAccessTokenFunction();\n\nvar recordManipulator = DataExtensionRecordsOperator({api: api, dataExtensionName: nameDE});\n\nif(applyFilterRetrieve){\n  recordManipulator.pipeExecuteInAllRecords({filter: filterRetrieveRows}, myCallback, BATCH_SIZE);\n}else{\n  recordManipulator.pipeExecuteInAllRecords(null, myCallback, BATCH_SIZE);\n}\n\nfunction myCallback(records){\n  var currentRecords = records;\n  var payloadComposite = {\n    \"allOrNone\" : false,\n    \"collateSubrequests\": false,\n    \"compositeRequest\": []\n  }\n  var currentRecord = {};\n  // var indexSubrequest = 0;\n  var queueToNextRequest = []; // Para quando não houver espaço para o envio num mesmo compositeRequest\n\n  // Write('Starting' + '\\n');\n\n  while(currentRecords.length > 0){\n    // Decidir o que fazer com o record\n    // Write('currentRecords.length' + '\\n');\n    // Write(Stringify(currentRecords.length) + '\\n\\n');\n    currentRecord = currentRecords.shift();\n    var requestMethodForRecord = getMethodForRecord(currentRecord);\n\n    // Verificar onde é possível inserir o Record no payload\n    // São 5 slots\n    var indexToInsertRecord = getIndexToInsertRecord(payloadComposite, requestMethodForRecord);\n    if(indexToInsertRecord >= 5){\n      // Não é possível inserir o contato nesse request, tentar na próxima request\n      queueToNextRequest.push(currentRecord);\n    }else{\n      payloadComposite = insereRecordNoPayload(payloadComposite, currentRecord, indexToInsertRecord, requestMethodForRecord);\n    }\n    \n    \n    // Fazer envio quando não há mais records para ser avaliados, ou quando o payload está com carga máxima\n    if(currentRecords.length == 0 || payloadCompositeNaCapacidadeMaxima(payloadComposite)){\n      // Logica de envio\n      var resp = enviarDadosParaService(payloadComposite);\n      \n      // Guardar resposta\n      var response = Platform.Function.ParseJSON('' + resp.content); // trata resposta\n      updateDEResposta(payloadComposite, response);\n\n      // limpar base de envio\n      payloadComposite.compositeRequest = [];\n    }\n\n    // Reinicia a fila, quando já tentou enviar todos os registros      \n    if(queueToNextRequest.length > 0 && currentRecords.length == 0){\n      // Write('Restarting Queue' + '\\n');\n      currentRecords = queueToNextRequest;\n    }\n\n    currentRecord = {};\n  }\n\n}\n\n} catch (error) {\n// Write('error' + '\\n');\n// Write(Platform.Function.Stringify(error) + '\\n\\n');\ninsertBulkRecordInDE(api, [{Data_Sent:Platform.Function.Stringify(error)}], logDECustomerKey);\n}\n\nfunction createSingleRecordComposite(record, sObjectType, deparaCampos, valoresFixos){\nvar recordFormated = {\n  \"attributes\": {\n    \"type\": sObjectType\n  }\n}\n\nfor (var key in deparaCampos) {\n  recordFormated[ deparaCampos[key] ] = record[key];\n}\n\n// se houver algum valor fixo, inserir no payload\nif(valoresFixos){\n  for (var key in valoresFixos) {\n    recordFormated[ key ] = valoresFixos[key];\n  }\n}\n\n// formata campo de data se houver\nfor(var key in recordFormated){\n  if(key == \"attributes\") continue\n  \n  if(dateFieldsToFormat && dateFieldsToFormat.length > 0){\n    for (var i = 0; i < dateFieldsToFormat.length; i++) {\n      if(key == dateFieldsToFormat[i]){\n        recordFormated[key] = formatDate(recordFormated[key]);\n      }\n    }\n  }\n}\n\nreturn recordFormated;\n}\n\nfunction recordUpdateCampaignMemberCompositePayload(record, sObjectType){\nvar recordFormated = {\n  \"attributes\": {\n    \"type\": sObjectType\n  }\n}\n\nrecordFormated.Id = record[DEPARACAMPOID_SERVICE];\nrecordFormated[ DEPARACAMPOS[campoPKNoDEParaAtualizar] ] = record[campoPKNoDEParaAtualizar];\nrecordFormated.HC_DISPARO_CAMPANHA__c = formatDate( new Date() );\n\nreturn recordFormated;\n}\n\nfunction DataExtensionRecordsOperator(configuration){\nvar api;\nvar customerKey;\n\nif(!configuration) Platform.Function.RaiseError('An configuration Object is required');\nif(!configuration.api) Platform.Function.RaiseError('Api attribute is required');\nif(!configuration.dataExtensionCustomerKey && !configuration.dataExtensionName) Platform.Function.RaiseError('dataExtensionCustomerKey or dataExtensionName attribute is required');\nif(configuration.dataExtensionCustomerKey && typeof configuration.dataExtensionCustomerKey != 'string') Platform.Function.RaiseError('dataExtensionCustomerKey must be a String');\napi = configuration.api;\n\nif(configuration.dataExtensionCustomerKey == null || configuration.dataExtensionCustomerKey == ''){\n  var simpleFilter = {\n    Property: 'Name',\n    SimpleOperator: 'equals',\n    Value: configuration.dataExtensionName\n  }\n  customerKey = api.retrieve(\"DataExtension\", [\"CustomerKey\"], simpleFilter).Results[0].CustomerKey;\n}else{\n  customerKey = configuration.dataExtensionCustomerKey;\n}\n\nfunction getRecords(options){\n  // options Object can have filter or headers\n  if(!!options && typeof options != 'object') Platform.Function.RaiseError('Options must be an object or omitted');\n      \n  var headers;\n  var filter;\n\n  if(!!options && options.headers){\n    headers = options.headers;\n  }else{\n    headers = retrieveFieldNames(customerKey, api);\n  }\n\n  if(!!options && options.filter) filter = options.filter;\n\n  var config = {\n    customerKey: customerKey,\n    cols: headers\n  }\n\n  var records = [],\n  moreData = true,\n  reqID = data = null;\n\n  while (moreData) {\n    moreData = false;\n    if (reqID == null) {\n      if(filter == undefined || filter == null){\n        data = api.retrieve(\"DataExtensionObject[\" + config.customerKey + \"]\", config.cols);\n      }else{\n        data = api.retrieve(\"DataExtensionObject[\" + config.customerKey + \"]\", config.cols, filter);\n      }\n      if(data.Status.substring(0, 5) == 'Error'){\n        Platform.Function.RaiseError('Something went wrong: ' + data.Status);\n      }\n    } else {\n      data = api.getNextBatch(\"DataExtensionObject[\" + config.customerKey + \"]\", reqID);\n    }\n\n    if (data != null) {\n      moreData = data.HasMoreRows;\n      reqID = data.RequestID;\n      for (var i = 0; i < data.Results.length; i++) {\n        var result_list = data.Results[i].Properties;\n        var obj = {};\n        for (k in result_list) {\n          var key = result_list[k].Name;\n          var val = result_list[k].Value\n          if (key.indexOf(\"_\") != 0) obj[key] = val;\n        }\n      records.push(obj);\n      }\n    }\n  }\n  return records;\n  \n}\n\nfunction pipeExecuteInAllRecords(options, cb, batchSize){\n  // options Object can have filter or headers\n  if(!!options && typeof options != 'object') Platform.Function.RaiseError('Options must be an object or omitted');\n  var batchSizeActual = batchSize == null || batchSize == undefined ? 2500 : batchSize;\n  batchSizeActual = batchSizeActual > 2500 ? 2500 : batchSizeActual;\n  if(batchSizeActual == 0) Platform.Function.RaiseError('batchSize cannot be 0');\n      \n  var filter;\n  headers = retrieveFieldNames(customerKey, api);\n\n  if(!!options && options.filter) filter = options.filter;\n\n  var config = {\n    customerKey: customerKey,\n    cols: headers\n  }\n\n  var records = [],\n  moreData = true,\n  reqID = data = null;\n\n  while (moreData) {\n    moreData = false;\n    if (reqID == null) {\n      if(filter == undefined || filter == null){\n        data = api.retrieve(\"DataExtensionObject[\" + config.customerKey + \"]\", config.cols);\n      }else{\n        data = api.retrieve(\"DataExtensionObject[\" + config.customerKey + \"]\", config.cols, filter);\n      }\n      if(data.Status.substring(0, 5) == 'Error'){\n        Platform.Function.RaiseError('Something went wrong: ' + data.Status);\n      }\n    } else {\n      data = api.getNextBatch(\"DataExtensionObject[\" + config.customerKey + \"]\", reqID);\n    }\n\n    if (data != null) {\n      moreData = data.HasMoreRows;\n      reqID = data.RequestID;\n      var retrievedData = data.Results;\n      while ( retrievedData.length != 0 ) {\n        var currentData = retrievedData.splice(0, batchSizeActual);\n        for (var i = 0; i < currentData.length; i++) {\n          var result_list = currentData[i].Properties;\n          var obj = {};\n          for (k in result_list) {\n            var key = result_list[k].Name;\n            var val = result_list[k].Value\n            if (key.indexOf(\"_\") != 0) obj[key] = val;\n          }\n          records.push(obj);\n        }\n        cb(records); // operate over the first Chunck\n        records = []; // clear records, free up memory\n        // Se estiver em um tempo próximo de ocorrer erro por timeout na atividade de execução de script,\n        // interrompe a execução\n        if(START_TIME != null && START_TIME != undefined && (new Date().getTime() - START_TIME > MAX_EXECUTION_TIME_MILISECONDS)){\n          moreData = false;\n        }\n      }\n    }\n  }\n}\n\nfunction retrieveFieldNames(customerKey, api) {\n  var filter = {\n    Property: \"DataExtension.CustomerKey\",\n    SimpleOperator: \"equals\",\n    Value: customerKey\n  };\n\n  var req = api.retrieve(\"DataExtensionField\", [\"Name\"], filter);\n  var fields = req.Results;\n  var out = [];\n  for (k in fields) {\n    out = out.concat(fields[k].Name);\n  }\n  return out;\n}\n\nreturn {\n  getRecords: getRecords,\n  pipeExecuteInAllRecords: pipeExecuteInAllRecords\n}\n}\n\nfunction retrieveDECustomerKeyFromName(api, dataExtensionName){\nvar simpleFilter = {\n  Property: 'Name',\n  SimpleOperator: 'equals',\n  Value: dataExtensionName\n}\nvar result = api.retrieve('DataExtension', ['CustomerKey'], simpleFilter);\nif(result.Status != 'OK' || result.Results.length < 1){\n  return null\n}else{\n  return result.Results[0].CustomerKey;\n}\n}\n\nfunction insertRecordInDE(api, record, customerKey){\nif(!api) Platform.Function.RaiseError('Api param is required');\nvar props = [];\nfor(prop in record){\n  props.push( {Name: prop, Value: record[prop] } );\n}\nvar data = {\n  CustomerKey: customerKey,\n  Properties: props\n}\nreturn api.createItem('DataExtensionObject', data);\n}\n\nfunction formatDate(date) {\nvar d = new Date(date),\n    month = '' + (d.getMonth() + 1),\n    day = '' + d.getDate(),\n    year = d.getFullYear()\nif (month.length < 2) \n    month = '0' + month;\nif (day.length < 2) \n    day = '0' + day;\nhours = hours.length < 2 ? '0' + hours : hours;\nminutes = minutes.length < 2 ? '0' + minutes : minutes;\nseconds = seconds.length < 2 ? '0' + seconds : seconds;\nvar formattedDate = year + '-' + month + '-' + day;\nreturn formattedDate;\n}\n\nfunction insertBulkRecordInDE(api, records, customerKey){\nif(!api) Platform.Function.RaiseError('Api param is required');\nvar data = [];\nfor(var recordIndex = 0; recordIndex < records.length ; recordIndex++){\n  var record = records[recordIndex];\n  var props = [];\n  for (prop in record) {\n    props.push({ Name: prop, Value: record[prop] });\n  }\n  data.push({\n    CustomerKey: customerKey,\n    Properties: props\n  });\n}\nreturn api.createBatch('DataExtensionObject', data);\n}\n\nfunction upsertBulkRecordInDE(api, records, customerKey){\nif(!api) Platform.Function.RaiseError('Api param is required');\nvar data = [];\nfor(var recordIndex = 0; recordIndex < records.length ; recordIndex++){\n  var record = records[recordIndex];\n  var props = [];\n  for (prop in record) {\n    props.push({ Name: prop, Value: record[prop] });\n  }\n  data.push({\n    CustomerKey: customerKey,\n    Properties: props\n  });\n}\nreturn api.updateBatch('DataExtensionObject', data, {SaveOptions: [{'PropertyName': '*', SaveAction: 'UpdateAdd'}]});\n}\n\nfunction createCompositeSubrequest(method, refId){\nreturn  {\n  \"method\" : method,\n  \"url\" : \"/services/data/v54.0/composite/sobjects/\",\n  \"referenceId\": refId,\n  \"body\" : {\n    \"allOrNone\" : false,\n    \"records\" : [\n    ]\n  }\n}\n}\n\nfunction getMethodForRecord(record){\nif(record.Id_Membro_Campanha == null || record.Id_Membro_Campanha == undefined || record.Id_Membro_Campanha == '') return 'POST';\nreturn 'PATCH';\n}\n\nfunction getIndexToInsertRecord(payloadComposite, requestMethod){\n// verificar se o metodo na subrequest atual (POST ou PATCH) é o mesmo do record atual\n// e se há espaço para enviar esse record (max 200 records por subrequest)\nvar indexSubrequest = 0;\nfor(indexSubrequest = 0; indexSubrequest < 5 ; indexSubrequest++){\n\n  // Ainda não existe essa subrequest, então o contato pode ser inserido nesse index\n  if(!payloadComposite.compositeRequest[indexSubrequest]) return indexSubrequest;\n  \n  // existe um objeto e ele é do mesmo method\n  if(payloadComposite.compositeRequest[indexSubrequest].method == requestMethod \n    && payloadComposite.compositeRequest[indexSubrequest].body.records.length < MAX_COMPOSITE_SUBREQUEST_SIZE) return indexSubrequest;\n}\nreturn indexSubrequest;\n}\n\nfunction payloadCompositeNaCapacidadeMaxima(payloadComposite){\nfor(var i = 0; i < 5 ; i++){\n  // Ainda não existe essa subrequest, então não está completo\n  if(!payloadComposite.compositeRequest[i]) return false;\n  \n  // existe um objeto e ele é do mesmo method\n  if(payloadComposite.compositeRequest[i].body.records.length < MAX_COMPOSITE_SUBREQUEST_SIZE) return false;\n}\nreturn true;\n}\n\nfunction insereRecordNoPayload(payloadComposite, record, indexToInsertRecord, requestMethodForRecord){\n// Confere se há um composite subrequest criado e insere (ou cria e insere)\nif(!payloadComposite.compositeRequest[indexToInsertRecord]) payloadComposite.compositeRequest.push(createCompositeSubrequest(requestMethodForRecord, 'request'+indexToInsertRecord));\n\n// Adiciona o record fazendo tratativa\n// Para update\nif(!!DEPARACAMPOID_SERVICE && DEPARACAMPOID_SERVICE != '' && requestMethodForRecord == 'PATCH'){\n  var formattedRecord = recordUpdateCampaignMemberCompositePayload(record, SOBJECTTYPE);    \n  formattedRecord = includeIDField(formattedRecord, record);\n}else{ // Para insert\n  var formattedRecord = createSingleRecordComposite(record, SOBJECTTYPE, DEPARACAMPOS, VALORESFIXOS);\n}\n\npayloadComposite.compositeRequest[indexToInsertRecord].body.records.push( formattedRecord );\n\nreturn payloadComposite;\n}\n\nfunction includeIDField(formattedRecord, retrieveRecordFromDE){\nformattedRecord.Id = retrieveRecordFromDE[DEPARACAMPOID_SERVICE];\nreturn formattedRecord;\n}\n\nfunction updateDEResposta(payloadEnviado, payloadResposta){\n  var logsToDE = [];\n  var OTC291_DE_dados = [];\n\n  var subRequestEnviado = {};\n  var subRequestResposta = {};\n  for (var subRequest = 0; subRequest < payloadEnviado.compositeRequest.length; subRequest++) {\n    subRequestEnviado = payloadEnviado.compositeRequest[subRequest];\n    subRequestResposta = payloadResposta.compositeResponse[subRequest];\n    \n    for(var row = 0; row < subRequestEnviado.body.records.length; row++){\n      var recordEnviado = subRequestEnviado.body.records[row];\n      var recordResposta = subRequestResposta.body[row];\n      \n      // dados de log\n      var logData = {\n        Log: idCampanha,\n        Data_Sent: Platform.Function.Stringify(recordEnviado).substring(0, 3000),\n        Response: Platform.Function.Stringify(recordResposta).substring(0, 3000)\n      }\n      logsToDE.push(logData);\n\n      // dados para atualizar o DE que insere no Service com os Ids\n      var OTC291_DE_dados_row = {}\n      OTC291_DE_dados_row[campoIdNoDEParaAtualizar] = recordResposta.id;\n      OTC291_DE_dados_row[campoPKNoDEParaAtualizar] = recordEnviado[ DEPARACAMPOS[campoPKNoDEParaAtualizar] ];\n      OTC291_DE_dados_row[flagEnvioParaService] = true; // campo de flag para guardar no DE que essa linha já foi disparada para o Service\n      OTC291_DE_dados.push(OTC291_DE_dados_row);\n    }\n\n    subRequestEnviado = {};\n    subRequestResposta = {};\n    recordEnviado = {};\n    recordResposta = {};\n  }\n\n  insertBulkRecordInDE(api, logsToDE, logDECustomerKey); // Insere no DE de log\n  upsertBulkRecordInDE(api, OTC291_DE_dados, otc291_DE_Customerkey); // Insere a resposta do ID no DE de extração (OTC291 fitlrada)\n}\n\nfunction enviarDadosParaService(payloadComposite){\n  var auth = 'Bearer ' + access_token;\n\n  var req = new Script.Util.HttpRequest(urlToUpsert);\n  req.emptyContentHandling = 1;\n  req.retries = 2;\n  req.continueOnError = true;\n  req.contentType = \"application/json;charset=UTF-8\"\n  req.setHeader(\"Accept\", '*/*');\n  req.setHeader(\"Accept-Encoding\", 'gzip, deflate, br');\n  req.setHeader(\"Authorization\", auth);\n  req.method = \"POST\";\n\n  var stringifiedPayload = Platform.Function.Stringify(payloadComposite);\n  var data = stringifiedPayload;\n\n  req.postData = data;\n  return req.send();\n}",
  "availableViews": [],
  "modelVersion": 2
}
{
  "id": 57016,
  "customerKey": "bd731d34-726c-4ba7-a068-cf32d8d03ba7",
  "objectID": "5d2e0f0e-e88b-4f41-9e4a-61495eb380bc",
  "assetType": {
    "id": 220,
    "name": "codesnippetblock",
    "displayName": "Code Snippet Block"
  },
  "fileProperties": {
    "fileName": "TEST SERVICE INTEGRATION"
  },
  "name": "TEST SERVICE INTEGRATION",
  "owner": {
    "id": 713538740,
    "email": "matheus.leto@harpiacloud.com.br",
    "name": "Matheus Leto",
    "userId": "713538740"
  },
  "createdDate": "2022-03-16T13:49:17.103-06:00",
  "createdBy": {
    "id": 713538740,
    "email": "matheus.leto@harpiacloud.com.br",
    "name": "Matheus Leto",
    "userId": "713538740"
  },
  "modifiedDate": "2022-03-16T13:49:17.103-06:00",
  "modifiedBy": {
    "id": 713538740,
    "email": "matheus.leto@harpiacloud.com.br",
    "name": "Matheus Leto",
    "userId": "713538740"
  },
  "enterpriseId": 514002572,
  "memberId": 514002572,
  "status": {
    "id": 1,
    "name": "Draft"
  },
  "thumbnail": {
    "thumbnailUrl": "/v1/assets/57016/thumbnail"
  },
  "category": {
    "id": 45099,
    "name": "Geração Automática OTC290",
    "parentId": 45122
  },
  "content": "\nvar api = new Script.Util.WSProxy();\nvar urlToUpsert = 'https://brasilcap.my.salesforce.com/services/data/v52.0/composite/sobjects/Account/HC_CPF_CNPJ_Cliente__c';\nvar nameDE = 'Tb_Base_Prospect_OTC291_Filtrada_Algar';\nvar idCampanha = '7016g000002NzuPAAS';\nvar attributeType = 'Account'; // Objeto para inserir\nvar BATCH_SIZE = 200; // 1 a 2500\n// Colocar como está o nome do campo no Data Extension (de) como atributo (esquerdo) e com qual nome deve ser enviado para o Service (para)\n// no lado direito como valor\nvar deparaCampos = {\n  \"CPF\": \"HC_CPF_CNPJ_Cliente__c\",\n  \"Nome\": \"Name\",\n  \"Dt_Nascimento_SF\": \"HC_Data_Nascimento__c\"\n}\n\n// DE OTC291 filtrado\nvar campoIdNoDEParaAtualizar = 'Id_Conta';\nvar campoPKNoDEParaAtualizar = 'CPF';\n\n  var logDEName = 'Log Salesforce Integration';\n  var logDECustomerKey = retrieveDECustomerKeyFromName(api, logDEName);\ntry {\n  var otc291_DE_Customerkey = retrieveDECustomerKeyFromName(api, nameDE);\n  // var requestAccessTokenFunction = eval(Platform.Function.TreatAsContent( Platform.Function.ContentBlockByID('56359') ));\n  var access_token = requestAccessToken();\n  \n  var recordManipulator = DataExtensionRecordsOperator({api: api, dataExtensionName: nameDE});\n  recordManipulator.pipeExecuteInAllRecords(null, myCallback, BATCH_SIZE);\n\n  function myCallback(records){\n  Platform.Function.RaiseError('TESTE ERROR 2');\n    var payloadComposite = createPayloadComposite(records, attributeType, deparaCampos, valoresFixos);\n    var auth = 'Bearer ' + access_token;\n  \n    var req = new Script.Util.HttpRequest(urlToUpsert);\n    req.emptyContentHandling = 1;\n    req.retries = 2;\n    req.continueOnError = true;\n    req.contentType = \"application/json;charset=UTF-8\"\n    req.setHeader(\"Accept\", '*/*');\n    req.setHeader(\"Accept-Encoding\", 'gzip, deflate, br');\n    req.setHeader(\"Authorization\", auth);\n    req.method = \"PATCH\";\n  \n    var stringifiedPayload = Stringify(payloadComposite);\n    var data = stringifiedPayload;\n    \n    req.postData = data;\n    var resp = req.send();\n    var response = Platform.Function.ParseJSON('' + resp.content);\n\n    var logsToDE = [];\n    var OTC291_DE_dados = [];\n    for(var row = 0; row < records.length; row++){\n      // dados de log\n      var logData = {\n        Log: 'campanha - ' + idCampanha,\n        Data_Sent: Stringify(records[row]).substring(0, 3000),\n        Response: Stringify(response[row]).substring(0, 3000)\n      }\n      logsToDE.push(logData);\n\n      // dados para atualizar o DE que insere no Service com os Ids\n      var OTC291_DE_dados_row = {}\n      OTC291_DE_dados_row[campoIdNoDEParaAtualizar] = response[row].id;\n      OTC291_DE_dados_row[campoPKNoDEParaAtualizar] = records[row][campoPKNoDEParaAtualizar];\n      OTC291_DE_dados.push(OTC291_DE_dados_row);\n    }\n    \n    insertBulkRecordInDE(api, logsToDE, logDECustomerKey); // Insere no DE de log\n    upsertBulkRecordInDE(api, OTC291_DE_dados, customerKey); // Insere a resposta do ID no DE de extração (OTC291 fitlrada)\n\n  }\n\n} catch (error) {\n  // Write('error' + '\\n');\n  // Write(Stringify(error) + '\\n\\n');\n  var res1 = insertRecordInDE(api, {Data_Sent: Stringify(error).substring(0,3000)}, logDECustomerKey);\n  Write('res1' + '\\n');\n  Write(Stringify(res1) + '\\n\\n');\n  var res2 = insertBulkRecordInDE(api, [{Data_Sent: Stringify(error).substring(0,3000)}], logDECustomerKey);\n  Write('res2' + '\\n');\n  Write(Stringify(res2) + '\\n\\n');\n  // Platform.Function.RaiseError('error');\n  \n}\n\nfunction createPayloadComposite(records, sObjectType, deparaCampos, valoresFixos){\n  var payload = {\n    \"allOrNone\": false,\n    \"records\": []\n  }\n\n  for(var i = 0; i < records.length; i++){\n    payload.records.push( createSingleRecordComposite(records[i], sObjectType, deparaCampos, valoresFixos) );\n  }\n\n  return payload;\n}\n\nfunction createSingleRecordComposite(record, sObjectType, deparaCampos, valoresFixos){\n  var recordFormated = {\n    \"attributes\": {\n      \"type\": sObjectType\n    }\n  }\n\n  for (var key in deparaCampos) {\n    if( key == 'Dt_Nascimento_SF'){\n      recordFormated[ deparaCampos[key] ] = formatDate(record[key]);\n    }else{\n      recordFormated[ deparaCampos[key] ] = record[key];\n    }\n  }\n\n  // se houver algum valor fixo, inserir no payload\n  if(valoresFixos){\n    for (var key in valoresFixos) {\n      recordFormated[ key ] = valoresFixos[key];\n    }\n  }\n  \n  return recordFormated\n\n}\n\nfunction DataExtensionRecordsOperator(configuration){\n  var api;\n  var customerKey;\n  \n  if(!configuration) Platform.Function.RaiseError('An configuration Object is required');\n  if(!configuration.api) Platform.Function.RaiseError('Api attribute is required');\n  if(!configuration.dataExtensionCustomerKey && !configuration.dataExtensionName) Platform.Function.RaiseError('dataExtensionCustomerKey or dataExtensionName attribute is required');\n  if(configuration.dataExtensionCustomerKey && typeof configuration.dataExtensionCustomerKey != 'string') Platform.Function.RaiseError('dataExtensionCustomerKey must be a String');\n  api = configuration.api;\n  \n  if(configuration.dataExtensionCustomerKey == null || configuration.dataExtensionCustomerKey == ''){\n    var simpleFilter = {\n      Property: 'Name',\n      SimpleOperator: 'equals',\n      Value: configuration.dataExtensionName\n    }\n    customerKey = api.retrieve(\"DataExtension\", [\"CustomerKey\"], simpleFilter).Results[0].CustomerKey;\n  }else{\n    customerKey = configuration.dataExtensionCustomerKey;\n  }\n\n  function getRecords(options){\n    // options Object can have filter or headers\n    if(!!options && typeof options != 'object') Platform.Function.RaiseError('Options must be an object or omitted');\n        \n    var headers;\n    var filter;\n\n    if(!!options && options.headers){\n      headers = options.headers;\n    }else{\n      headers = retrieveFieldNames(customerKey, api);\n    }\n\n    if(!!options && options.filter) filter = options.filter;\n\n    var config = {\n      customerKey: customerKey,\n      cols: headers\n    }\n  \n    var records = [],\n    moreData = true,\n    reqID = data = null;\n\n    while (moreData) {\n      moreData = false;\n      if (reqID == null) {\n        if(filter == undefined || filter == null){\n          data = api.retrieve(\"DataExtensionObject[\" + config.customerKey + \"]\", config.cols);\n        }else{\n          data = api.retrieve(\"DataExtensionObject[\" + config.customerKey + \"]\", config.cols, filter);\n        }\n        if(data.Status.substring(0, 5) == 'Error'){\n          Platform.Function.RaiseError('Something went wrong: ' + data.Status);\n        }\n      } else {\n        data = api.getNextBatch(\"DataExtensionObject[\" + config.customerKey + \"]\", reqID);\n      }\n\n      if (data != null) {\n        moreData = data.HasMoreRows;\n        reqID = data.RequestID;\n        for (var i = 0; i < data.Results.length; i++) {\n          var result_list = data.Results[i].Properties;\n          var obj = {};\n          for (k in result_list) {\n            var key = result_list[k].Name;\n            var val = result_list[k].Value\n            if (key.indexOf(\"_\") != 0) obj[key] = val;\n          }\n        records.push(obj);\n        }\n      }\n    }\n    return records;\n    \n  }\n\n  function pipeExecuteInAllRecords(options, cb, batchSize){\n    // options Object can have filter or headers\n    if(!!options && typeof options != 'object') Platform.Function.RaiseError('Options must be an object or omitted');\n    var batchSizeActual = batchSize == null || batchSize == undefined ? 2500 : batchSize;\n    batchSizeActual = batchSizeActual > 2500 ? 2500 : batchSizeActual;\n    if(batchSizeActual == 0) Platform.Function.RaiseError('batchSize cannot be 0');\n        \n    var filter;\n    headers = retrieveFieldNames(customerKey, api);\n\n    if(!!options && options.filter) filter = options.filter;\n\n    var config = {\n      customerKey: customerKey,\n      cols: headers\n    }\n  \n    var records = [],\n    moreData = true,\n    reqID = data = null;\n\n    while (moreData) {\n      moreData = false;\n      if (reqID == null) {\n        if(filter == undefined || filter == null){\n          data = api.retrieve(\"DataExtensionObject[\" + config.customerKey + \"]\", config.cols);\n        }else{\n          data = api.retrieve(\"DataExtensionObject[\" + config.customerKey + \"]\", config.cols, filter);\n        }\n        if(data.Status.substring(0, 5) == 'Error'){\n          Platform.Function.RaiseError('Something went wrong: ' + data.Status);\n        }\n      } else {\n        data = api.getNextBatch(\"DataExtensionObject[\" + config.customerKey + \"]\", reqID);\n      }\n\n      if (data != null) {\n        moreData = data.HasMoreRows;\n        reqID = data.RequestID;\n        var retrievedData = data.Results;\n        while ( retrievedData.length != 0 ) {\n          var currentData = retrievedData.splice(0, batchSizeActual);\n          for (var i = 0; i < currentData.length; i++) {\n            var result_list = currentData[i].Properties;\n            var obj = {};\n            for (k in result_list) {\n              var key = result_list[k].Name;\n              var val = result_list[k].Value\n              if (key.indexOf(\"_\") != 0) obj[key] = val;\n            }\n            records.push(obj);\n          }\n          cb(records); // operate over the first Chunck\n          records = []; // clear records, free up memory\n        }\n      }\n    }\n  }\n\n  function retrieveFieldNames(customerKey, api) {\n    var filter = {\n      Property: \"DataExtension.CustomerKey\",\n      SimpleOperator: \"equals\",\n      Value: customerKey\n    };\n\n    var req = api.retrieve(\"DataExtensionField\", [\"Name\"], filter);\n    var fields = req.Results;\n    var out = [];\n    for (k in fields) {\n      out = out.concat(fields[k].Name);\n    }\n    return out;\n  }\n\n  return {\n    getRecords: getRecords,\n    pipeExecuteInAllRecords: pipeExecuteInAllRecords\n  }\n}\n\nfunction retrieveDECustomerKeyFromName(api, dataExtensionName){\n  var simpleFilter = {\n    Property: 'Name',\n    SimpleOperator: 'equals',\n    Value: dataExtensionName\n  }\n  var result = api.retrieve('DataExtension', ['CustomerKey'], simpleFilter);\n  if(result.Status != 'OK' || result.Results.length < 1){\n    return null\n  }else{\n    return result.Results[0].CustomerKey;\n  }\n}\n\nfunction insertRecordInDE(api, record, customerKey){\n  if(!api) Platform.Function.RaiseError('Api param is required');\n  var props = [];\n  for(prop in record){\n    props.push( {Name: prop, Value: record[prop] } );\n  }\n  var data = {\n    CustomerKey: customerKey,\n    Properties: props\n  }\n  return api.createItem('DataExtensionObject', data);\n}\n\nfunction formatDate(date) {\n  var d = new Date(date),\n      month = '' + (d.getMonth() + 1),\n      day = '' + d.getDate(),\n      year = d.getFullYear()\n  if (month.length < 2) \n      month = '0' + month;\n  if (day.length < 2) \n      day = '0' + day;\n  hours = hours.length < 2 ? '0' + hours : hours;\n  minutes = minutes.length < 2 ? '0' + minutes : minutes;\n  seconds = seconds.length < 2 ? '0' + seconds : seconds;\n  var formattedDate = year + '-' + month + '-' + day;\n  return formattedDate;\n}\n\nfunction insertBulkRecordInDE(api, records, customerKey){\n  if(!api) Platform.Function.RaiseError('Api param is required');\n  var data = [];\n  for(var recordIndex = 0; recordIndex < records.length ; recordIndex++){\n    var record = records[recordIndex];\n    var props = [];\n    for (prop in record) {\n      props.push({ Name: prop, Value: record[prop] });\n    }\n    data.push({\n      CustomerKey: customerKey,\n      Properties: props\n    });\n  }\n  return api.createBatch('DataExtensionObject', data);\n}\n\n\n\nfunction upsertBulkRecordInDE(api, records, customerKey){\n  if(!api) Platform.Function.RaiseError('Api param is required');\n  var data = [];\n  for(var recordIndex = 0; recordIndex < records.length ; recordIndex++){\n    var record = records[recordIndex];\n    var props = [];\n    for (prop in record) {\n      props.push({ Name: prop, Value: record[prop] });\n    }\n    data.push({\n      CustomerKey: customerKey,\n      Properties: props\n    });\n  }\n  return api.updateBatch('DataExtensionObject', data, {SaveOptions: [{'PropertyName': '*', SaveAction: 'UpdateAdd'}]});\n}\n\nfunction requestAccessToken(){\n  var tokenRequestPayload = {\n    \"grant_type\": \"password\",\n    \"client_id\": \"3MVG9LBJLApeX_PASzcm0FNrIJTo13XUlNPcmj3du6MQvcYBZKgudHh.ZfrlOM_UsGw3oJpBPPO9YUN5FAWxq\",\n    \"client_secret\": \"616AAE074260C055FC83DCF5C18A8EE10DC489AB0D3F363A495754F9BE591436\",\n    \"username\": \"matheus.leto@harpiacloud.com.br.bbcap\",\n    \"password\": \"apexDev@14\"\n  };\n  var urlToken = 'https://brasilcap.my.salesforce.com/services/oauth2/token';\n  var accessTokenResult = HTTP.Post(urlToken, 'application/x-www-form-urlencoded', objectToQueryString(tokenRequestPayload));\n  var resultDataRequestedToken = Platform.Function.ParseJSON(accessTokenResult.Response[0]);\n\n  function objectToQueryString(obj) {\n    var str = [];\n    for (var p in obj)\n      if (obj.hasOwnProperty(p)) {\n        str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n      }\n    return str.join(\"&\");\n  }\n\n  return resultDataRequestedToken.access_token;\n}",
  "availableViews": [],
  "modelVersion": 2
}
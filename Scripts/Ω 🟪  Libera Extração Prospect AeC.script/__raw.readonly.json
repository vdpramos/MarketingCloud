{
  "ssjsActivityId": "0e1c2c2c-768c-4e40-9b58-a71e24ce7873",
  "name": "Libera Extração Prospect AeC",
  "key": "4100a671-e3a5-48e9-b40c-696677f1173a",
  "description": "",
  "script": "<script runat=\"server\">\n\n  Platform(\"Core\", \"2.0\");\n  var api = new Script.Util.WSProxy();\n  var DEFiltrada = 'Tb_Base_Prospect_OTC291_Online_Filtrada_AeC';\n  var DEName = 'Flag_Extracao_Prospect_AeC';\n  var myFilter = {\n      Property: 'Envio_Service_MembroCampanha',\n      SimpleOperator: 'equals',\n      Value: false\n  }\n  \n  var recordOperator = DataExtensionRecordsOperator({api:api, dataExtensionName: DEFiltrada})\n  var records = recordOperator.getRecords({filter: myFilter});\n\n  if(records.length == 0){\n    // se não houver records para enviar de membro da campanha, então finalizou\n    insertRecordInDE(api, {EXTRACAO: true}, retrieveDECustomerKeyFromName(api, DEName));\n  }\n  // create record to allow integration to continue\n    \n  // aux functions\n  function insertRecordInDE(api, record, customerKey){\n    if(!api) Platform.Function.RaiseError('Api param is required');\n    var props = [];\n    for(prop in record){\n      props.push( {Name: prop, Value: record[prop] } );\n    }\n    var data = {\n      CustomerKey: customerKey,\n      Properties: props\n    }\n    return api.createItem('DataExtensionObject', data);\n  }\n\n  function retrieveDECustomerKeyFromName(api, dataExtensionName){\n    var simpleFilter = {\n      Property: 'Name',\n      SimpleOperator: 'equals',\n      Value: dataExtensionName\n    }\n    var result = api.retrieve('DataExtension', ['CustomerKey'], simpleFilter);\n    if(result.Status != 'OK' || result.Results.length < 1){\n      return null\n    }else{\n      return result.Results[0].CustomerKey;\n    }\n  }\n\n  function DataExtensionRecordsOperator(configuration){\n      var api;\n      var customerKey;\n      \n      if(!configuration) Platform.Function.RaiseError('An configuration Object is required');\n      if(!configuration.api) Platform.Function.RaiseError('Api attribute is required');\n      if(!configuration.dataExtensionCustomerKey && !configuration.dataExtensionName) Platform.Function.RaiseError('dataExtensionCustomerKey or dataExtensionName attribute is required');\n      if(configuration.dataExtensionCustomerKey && typeof configuration.dataExtensionCustomerKey != 'string') Platform.Function.RaiseError('dataExtensionCustomerKey must be a String');\n      api = configuration.api;\n      \n      if(configuration.dataExtensionCustomerKey == null || configuration.dataExtensionCustomerKey == ''){\n        var simpleFilter = {\n          Property: 'Name',\n          SimpleOperator: 'equals',\n          Value: configuration.dataExtensionName\n        }\n        customerKey = api.retrieve(\"DataExtension\", [\"CustomerKey\"], simpleFilter).Results[0].CustomerKey;\n      }else{\n        customerKey = configuration.dataExtensionCustomerKey;\n      }\n      \n      function getRecords(options){\n        // options Object can have filter or headers\n        if(!!options && typeof options != 'object') Platform.Function.RaiseError('Options must be an object or omitted');\n            \n        var headers;\n        var filter;\n      \n        if(!!options && options.headers){\n          headers = options.headers;\n        }else{\n          headers = retrieveFieldNames(customerKey, api);\n        }\n      \n        if(!!options && options.filter) filter = options.filter;\n      \n        var config = {\n          customerKey: customerKey,\n          cols: headers\n        }\n      \n        var records = [],\n        moreData = true,\n        reqID = data = null;\n      \n        while (moreData) {\n          moreData = false;\n          if (reqID == null) {\n            if(filter == undefined || filter == null){\n              data = api.retrieve(\"DataExtensionObject[\" + config.customerKey + \"]\", config.cols);\n            }else{\n              data = api.retrieve(\"DataExtensionObject[\" + config.customerKey + \"]\", config.cols, filter);\n            }\n            if(data.Status.substring(0, 5) == 'Error'){\n              Platform.Function.RaiseError('Something went wrong: ' + data.Status);\n            }\n          } else {\n            data = api.getNextBatch(\"DataExtensionObject[\" + config.customerKey + \"]\", reqID);\n          }\n      \n          if (data != null) {\n            moreData = data.HasMoreRows;\n            reqID = data.RequestID;\n            for (var i = 0; i < data.Results.length; i++) {\n              var result_list = data.Results[i].Properties;\n              var obj = {};\n              for (k in result_list) {\n                var key = result_list[k].Name;\n                var val = result_list[k].Value\n                if (key.indexOf(\"_\") != 0) obj[key] = val;\n              }\n            records.push(obj);\n            }\n          }\n        }\n        return records;\n        \n      }\n      \n      function pipeExecuteInAllRecords(options, cb, batchSize){\n        // options Object can have filter or headers\n        if(!!options && typeof options != 'object') Platform.Function.RaiseError('Options must be an object or omitted');\n        var batchSizeActual = batchSize == null || batchSize == undefined ? 2500 : batchSize;\n        batchSizeActual = batchSizeActual > 2500 ? 2500 : batchSizeActual;\n        if(batchSizeActual == 0) Platform.Function.RaiseError('batchSize cannot be 0');\n            \n        var filter;\n        headers = retrieveFieldNames(customerKey, api);\n      \n        if(!!options && options.filter) filter = options.filter;\n      \n        var config = {\n          customerKey: customerKey,\n          cols: headers\n        }\n      \n        var records = [],\n        moreData = true,\n        reqID = data = null;\n      \n        while (moreData) {\n          moreData = false;\n          if (reqID == null) {\n            if(filter == undefined || filter == null){\n              data = api.retrieve(\"DataExtensionObject[\" + config.customerKey + \"]\", config.cols);\n            }else{\n              data = api.retrieve(\"DataExtensionObject[\" + config.customerKey + \"]\", config.cols, filter);\n            }\n            if(data.Status.substring(0, 5) == 'Error'){\n              Platform.Function.RaiseError('Something went wrong: ' + data.Status);\n            }\n          } else {\n            data = api.getNextBatch(\"DataExtensionObject[\" + config.customerKey + \"]\", reqID);\n          }\n      \n          if (data != null) {\n            moreData = data.HasMoreRows;\n            reqID = data.RequestID;\n            var retrievedData = data.Results;\n            while ( retrievedData.length != 0 ) {\n              var currentData = retrievedData.splice(0, batchSizeActual);\n              for (var i = 0; i < currentData.length; i++) {\n                var result_list = currentData[i].Properties;\n                var obj = {};\n                for (k in result_list) {\n                  var key = result_list[k].Name;\n                  var val = result_list[k].Value\n                  if (key.indexOf(\"_\") != 0) obj[key] = val;\n                }\n                records.push(obj);\n              }\n              cb(records); // operate over the first Chunck\n              records = []; // clear records, free up memory\n              // Se estiver em um tempo próximo de ocorrer erro por timeout na atividade de execução de script,\n              // interrompe a execução\n              if(START_TIME != null && START_TIME != undefined && (new Date().getTime() - START_TIME > MAX_EXECUTION_TIME_MILISECONDS)){\n                moreData = false;\n              }\n            }\n          }\n        }\n      }\n      \n      function retrieveFieldNames(customerKey, api) {\n        var filter = {\n          Property: \"DataExtension.CustomerKey\",\n          SimpleOperator: \"equals\",\n          Value: customerKey\n        };\n      \n        var req = api.retrieve(\"DataExtensionField\", [\"Name\"], filter);\n        var fields = req.Results;\n        var out = [];\n        for (k in fields) {\n          out = out.concat(fields[k].Name);\n        }\n        return out;\n      }\n      \n      return {\n        getRecords: getRecords,\n        pipeExecuteInAllRecords: pipeExecuteInAllRecords\n      }\n    }\n</script>",
  "categoryId": 1937,
  "createdDate": "2023-07-05T13:08:33.52",
  "modifiedDate": "2023-07-10T09:16:35.937"
}